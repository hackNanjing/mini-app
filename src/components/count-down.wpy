<style lang="less">
  .counter {
    text-align: center;
    font-size: 60px;
    margin-bottom: 36px;
    z-index:9999;
  }
  .font-white {
    color: #fff;
  }
  .font-black {
    color: #333;
  }
  .count {
    font-size: 18px;
    font-weight: bold;
  }
  .action-button {
    width: 270px;
    height: 55px;
    color: #fff;
    background-color: #28d526;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
  }
  .mode-container {
    height: 100vh;
    width: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    
    .counter {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%,-50%); 
    }

     .close-button {
      width: 48rpx;
      height: 48rpx;
      position: fixed;
      top: 36rpx;
      right: 36rpx;
    }
  }
</style>

<template>
  <view class="counter font-black" wx:if="{{!isStarted}}">
    <text>{{time.hour}}:</text>
    <text>{{time.minute}}:</text>
    <text>{{time.second}}</text>
    <picker mode="time" value="{{test}}" start="0:10" end="4:00" @change.stop="bindTimeChange">
      <view class="picker">
        当前选择: {{test}}
      </view>
    </picker>
  </view>
  <view class="mode-container" wx:if="{{isStarted}}">
  <view @tap.stop="close"><image src="http://i1.piimg.com/588926/dfdeb88f1ac462a5.png" mode="scaleToFill" class="close-button" ></image></view>
    <view class="counter font-white">
      <text>{{time.hour}}:</text>
      <text>{{time.minute}}:</text>
      <text>{{time.second}}</text>
    </view>
  </view>
  <view class="action-button {{style}}" @tap.default="start" wx:if="{{!isStarted}}">
    <text>Start</text>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { BASE_URL } from '../constants'
  import { generateMinutes } from '../utils';

  const DEFAULT_TIME = {
    hour: 0,
    minute: 30,
    second: 0
  }

  export default class Counter extends wepy.component {
    data = {
      time: JSON.parse(JSON.stringify(DEFAULT_TIME)),
      timeoutID: null,
      isStarted: false,
      excess: '00 : 00 : 00',
      test: null
    }

    methods = {
      start() {
        wepy.setStorage({ key: 'startAt', data: new Date().getTime() });
        wepy.setStorage({ key: 'total_minute', data: generateMinutes(this.time) });
        this.isStarted = true;
        this.countDown();
      },
      bindTimeChange() {

      },
      async close() {
        this.isStarted = false;
        clearTimeout(this.timeoutID);
        console.log('close test')
        const startAt = wx.getStorageSync('startAt');
        const total_minute = wx.getStorageSync('total_minute');
        let success_minute = total_minute - generateMinutes(this.time);
        console.log('success_minute', total_minute - generateMinutes(this.time))
        const postData = {
          startAt,
          total_minute,
          success_minute
        };
        const user = await this.$wxapp.getUserInfo();
        const { data: profile} = await wepy.request({
          url: `${BASE_URL}/v1/users/end`,
          method: 'POST',
          data: postData,
          header: {
            auth: user.token
          }
        });

        console.log('success_minute', success_minute, profile)
        if (profile.now && profile.before_rank) wepy.navigateTo({url: `/pages/status?now=${profile.now}&before=${profile.before_rank}&score=${success_minute}`});
        this.time = JSON.parse(JSON.stringify(DEFAULT_TIME));
        this.$apply();
      }
    }

    onLoad() {

    }

    countDown() {
      let { time, excess } = this.data
      if (typeof time === 'undefined') return

      let hour = parseInt(time.hour)
      let minute = parseInt(time.minute)
      let second = parseInt(time.second)

      switch (true) {
        case second > 0:
          second--
          break

        case minute > 0:
          minute--
          second = 59
          break

        case hour > 0:
          hour--
          minute = 59
          break
      }

      const currentHour = hour < 10 ? `${hour}` : hour
      const currentMinute = minute < 10 ? `0${minute}` : minute
      const currentSecond = second < 10 ? `0${second}` : second

      excess = `${currentHour} : ${currentMinute} : ${currentSecond}`

      this.time = {
        hour,
        minute,
        second
      }
      this.excess = excess

      this.$apply()

      this.timeoutID = setTimeout(() => {
        this.countDown()
      }, 1000)
    }
  }
</script>
